// class Solution { //faster
//     public int maxSubArray(int[] nums) {
//         int preSum=0, maxSum=Integer.MIN_VALUE;
//         for(int i : nums){
//             preSum += i;
//             if(preSum>maxSum){
//                 maxSum=preSum;
//             }
//             if(preSum<=0){
//                 preSum=0;
//             }
//         }
//         return maxSum;
//     }
// }

//method 2 dp
class Solution {
    public int maxSubArray(int[] nums) {
        int n = nums.length;
        int[] dp = new int[n];
        // base case
        // 第一个元素前面没有子数组
        dp[0] = nums[0];
        // 状态转移方程
        for (int i = 1; i < n; i++) {
            dp[i] = Math.max(nums[i], nums[i] + dp[i - 1]);
        }
        // 得到 nums 的最大子数组
        int res = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            res = Math.max(res, dp[i]);
        }
        return res;
    }
}
