class Solution {
    public boolean isHappy(int n) {
        //base case
        if(n == 1){
            return true;
        }else if(n==4){
            return false;
        }
        //not sure why equal 4 is unhappy number
        int sum=0;
        //System.out.print(" loop start: ");
        // calculate the sum for sqr n
        while(n>=1){
            sum += Math.pow((n%10),2);
            n=n/10;
            
        }
        //System.out.print(sum+ " ");
        //recursive
        return isHappy(sum);

    }
}

//method 2 use this one
class Solution {
    public boolean isHappy(int n) {
    //can not be on same position fast is next to it
        int fast= getNext(n);
        int slow=n;
        //two pointer check is infinty loop or not
        while(fast!=1&&fast!=slow){
        //slow is one number above
            slow=getNext(slow);
            //faster is two number above if only one getNext, there will be always one number infront
            //int fast= getNext(n); this code is just place the fast number infront slow not in loop
            fast=getNext(getNext(fast));
        }
        return fast==1;
    }
    
    //get the next number pow of each digit
    public int getNext(int n){
        int totalSum=0;
        while(n>0){
            totalSum+= Math.pow((n%10),2);
            n=n/10;
        }
        return totalSum;
    }
}
