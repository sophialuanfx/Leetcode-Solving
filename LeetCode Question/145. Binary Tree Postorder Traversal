/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
//  import java.util.LinkedList;
class Solution {
    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> list=new LinkedList<Integer>();
        //postorder<left><right><root>
        //iterater
        if(root == null) return list;
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        while(!stack.isEmpty()) { 
            TreeNode curr = stack.pop();
            list.add(0,curr.val); //add value to front
            if(curr.left!=null) {
              stack.push(curr.left); //push left first
            }
            if(curr.right!=null) {
               stack.push(curr.right);  //right after
            }
        }

        // recurisve(list,root);
        return list;
    }
    
    //recurisve
    //  public void recurisve(List<Integer> list, TreeNode root){
    //      //base case
    //      if(root==null){
    //         return;
    //      }
    //      recurisve(list, root.left);
    //      recurisve(list, root.right);
    //      //add value in to the list
    //      list.add(root.val);
    //  }

}
