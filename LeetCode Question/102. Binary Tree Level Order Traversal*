/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
         List<List<Integer>> finalList=new LinkedList<List<Integer>>();
         if(root==null){
             return finalList;
         }
         Queue<TreeNode> queue=new LinkedList<>(); //use queue for BFS
         queue.add(root); //add the top node
         while(!queue.isEmpty()){ 
            List<Integer> list=new LinkedList<Integer>(); //add new list each loop, cuz list is object use referrences
            int size=queue.size();
            for(int i=0; i<size;i++){ //loop # of node ech level
                TreeNode currNode=new TreeNode();
                currNode=queue.poll(); //poll the first node
                list.add(currNode.val); //add node value to the sub list
                if(currNode.left!=null){ 
                    queue.add(currNode.left);
                }
                if(currNode.right!=null){
                    queue.add(currNode.right);
                }
            }
            finalList.add(list); // before to next level
         }
         return finalList;
    }
}
