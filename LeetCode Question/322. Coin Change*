class Solution {
    public int coinChange(int[] coins, int amount) {
        //求“最”值， 求最少的coin
        //状态：会变得量 amount目标金额
        //选择:导致状态变化的： coins数组
        //定义:amount金额至少要coinChange（coins，amount）枚硬币
        //method 2
        int[] dp=new int[amount+1];
        Arrays.fill(dp, amount+1);
        //base case
        dp[0]=0;
        for(int i=0; i<dp.length;i++){
            for(int coin: coins){
                if(i-coin<0) continue;
                dp[i]=Math.min(dp[i],1+dp[i-coin]);  
            }
        }
        return (dp[amount]==amount+1)? -1: dp[amount];
        //method 1
        //base case:
        // if(amount==0){
        //     return 0;
        // }
        // if(amount<0){
        //     return -1;
        // }
        // int res=Integer.MAX_VALUE;
        // for(int coin: coins){
        //     int subSum=coinChange(coins, amount-coin);            
        //     if(subSum==-1){
        //         continue;
        //     }
        //     res=Math.min(res,subSum+1);
        // }
        // return res==Integer.MAX_VALUE? -1: res;
    }
}
